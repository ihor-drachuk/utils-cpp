name: Build & test

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        build_type: [Release, Debug]

    runs-on: ${{ matrix.os }}

    steps:
    - name: "Set OS-specific values (Linux)"
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
       echo "GENERATOR=Unix Makefiles" >> $GITHUB_ENV
       echo "CORES=$(nproc --all)" >> $GITHUB_ENV

    - name: "Set OS-specific values (Mac)"
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
       echo "GENERATOR=Unix Makefiles" >> $GITHUB_ENV
       echo "CORES=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV

    - name: "Set OS-specific values (Win; 2017)"
      if: ${{ matrix.os == 'windows-2016' }}
      shell: bash
      run: |
       echo "GENERATOR=Visual Studio 15 2017" >> $GITHUB_ENV
       echo "CORES=$NUMBER_OF_PROCESSORS" >> $GITHUB_ENV

    - name: "Set OS-specific values (Win; 2019)"
      if: ${{ matrix.os == 'windows-2019' }}
      shell: bash
      run: |
       echo "GENERATOR=Visual Studio 16 2019" >> $GITHUB_ENV
       echo "CORES=$NUMBER_OF_PROCESSORS" >> $GITHUB_ENV

    - uses: actions/checkout@v3
      with:
        path: src

    - name: Build
      working-directory: ${{github.workspace}}/src
      shell: bash
      run: |
       cmake -DUTILS_CPP_ENABLE_TESTS=ON -DUTILS_CPP_ENABLE_BENCHMARK=ON -DCMAKE_BUILD_TYPE="${{matrix.build_type}}" -G "${{env.GENERATOR}}" -S "${{github.workspace}}/src" -B "${{github.workspace}}/build"
       cmake --build "${{github.workspace}}/build" --config "${{matrix.build_type}}" -j "${{env.CORES}}"
       ctest --rerun-failed --output-on-failure --timeout 20 -C "${{matrix.build_type}}" --test-dir "${{github.workspace}}/build/tests"

  CodeChecker:
    runs-on: [ubuntu-20.04]
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v3

      # Prepare a build
      - name: "Prepare build"
        run: |
          mkdir -pv Build
          cd Build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..

      # Run the analysis
      - uses: whisperity/codechecker-analysis-action@v1
        id: codechecker
        with:
          logfile: ${{ github.workspace }}/Build/compile_commands.json

      # Upload the results to the CI.
      - uses: actions/upload-artifact@v3
        with:
          name: "CodeChecker Bug Reports"
          path: ${{ steps.codechecker.outputs.result-html-dir }}
